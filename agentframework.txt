# -*- coding: utf-8 -*-
"""
agentframework.py 3.0

Copyright (c) School of Geography.
University of Leeds, Leeds, West Yorkshire, UK, LS2 9JT.

Created on Wed Nov 29 19:08:57 2017

@author: Rania
"""

#agentframework.py

import random
import math


# Creating a class to randomise the coordinates of the agents.
class Agent():
    # Overriding the __init__ method to take in the lists 'environment' and
    # 'agents' which allows for communication between the various agents in
    # model.py.
    
    def __init__(self, environment, agents):
        self._x = random.randint(0, 99)
        self._y = random.randint(0, 99)
        self.environment = environment
        self.agents = agents
        # How much the agents have in store.
		
        self.store = 0
    
    
    def getx(self):
        return self._x
    
    
    def setx(self, value):
        self._x = value
    
    
    def gety(self):
        return self._y
    
    
    def sety(self, value):
        self._y = value
    
    
    x = property(getx, setx)
    
    y = property(gety, sety)
    
    
    # This method changes the coordinates of agents according to random numbers
    # and their relationship with the number '0.5'.
    
    def move(self):
        if random.random() < 0.5:
            self._y = (self._y + 1) % 100
        else:
            self._y = (self._y - 1) % 100

        if random.random() < 0.5:
            self._x = (self._x + 1) % 100
        else:
            self._x = (self._x - 1) % 100

    
    # This method gets the agents to eat some of the environment around them,
    # therefore changing values.
    
    def eat(self):
        if self.environment[self._y][self._x] > 10:
            self.environment[self._y][self._x] -= 10
            # Additional 10 units stored for the agent.
            self.store += 10
    
    
    # This method calls the distance_between method to calculate the distance
    # between agents and compare it with the neighbourhood variable to decide
    # whether to turn the agents' store into the average of their stores' sum.
    
    def share_with_neighbours(self, neighbourhood):
        self.neighbourhood = neighbourhood
        for agent in self.agents:
            distance_agents = self.distance_between(agent)
            if distance_agents <= neighbourhood:
                average = (self.store + agent.store)/ 2
                self.store = average
                agent.store = average
   
    
    # Defining the eucledian distance method to calculate the distance between 
    # agents.
    
    def distance_between(self, agent):
          return math.sqrt(((self._x - agent._x)**2) + ((self._y - agent._y)**2))      