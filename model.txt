# -*- coding: utf-8 -*-
"""
model.py 3.0

Copyright (c) School of Geography.
University of Leeds, Leeds, West Yorkshire, UK, LS2 9JT.

Created on Sat Oct 28 11:28:48 2017

@author: Ourania Sermpezi
"""

import random
#import math
import operator
import matplotlib.pyplot

# Creating a variable for the number of agents.

num_of_agents = 10


# Creating a variable for the number of iterations for the random loop.

num_of_iterations = 100


# Creating an empty list.

agents = []


# Generating ten random coordinates between 0 and 99, by running a loop.

for i in range(num_of_agents):
    agents.append ([random.randint(0, 99), random.randint(0, 99)])


print(agents)


# Creating a loop to move the coordinates twice.
# k is used so that I can repeat the loop twice.
#for k in range(2):
    # 10 rows.


# Creating a loop to move the coordinates num_of_iterations times.

for k in range(num_of_iterations):
    for i in range(num_of_agents):
        # 2 columns.
		
        for j in range(2):
            # Generating a random integer number between 0 and 1 and comparing
            # it to 0.5 to either increment or decrement the coordinate
            # values.
			
            if random.random() < 0.5:
                agents[i][j] += 1
            else:
                agents[i][j] -= 1
            # Setting up a 'torus' boundary solution, whereby agents are
            # allowed to leave the top of an area and come in at the bottom
            # or leave left and come from the right.
            # For agent values that are below 0, their absolute number is
            # used, which is always positive.
			
            if agents[i][j] < 0:
                agents[i][j] = abs(agents[i][j])
            # For agent values above 100, remove 100 from the value and
            # let them come in from the other side with the remainder part
            # of the value.
			
            elif agents[i][j] > 100:
                agents[i][j] = (agents[i][j])-100
            # For everything else, keep the values as they are.
			
            else:
                agents[i][j] = agents[i][j]
				
				
# Printing the new coordinates to test that the loop has worked.

print(agents)


# Setting the y and x limits of the plot axes between 0 and 99.

matplotlib.pyplot.ylim(0, 99)


matplotlib.pyplot.xlim(0, 99)


# Looping through the x and ys of each agent and plotting them.

for i in range(num_of_agents):
    matplotlib.pyplot.scatter(agents[i][1], agents[i][0])


# Finding the max value between all the x coordinates which are at position
# 1 of the list, i.e. which one is the most easterly one.
#m = max(agents, key=operator.itemgetter(1))
# Turning the most easterly point in the list into red.
#matplotlib.pyplot.scatter(m[1], m[0], color = 'red')


# Displaying the scatter plot.

matplotlib.pyplot.show()


# Setting up a new variable to calculate the eucledian distance between
# the two coordinate points.
#euclDist = math.sqrt(((y0 - y1) ** 2) + ((x0 - x1) ** 2))
#print(euclDist)