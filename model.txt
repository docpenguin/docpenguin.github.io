# -*- coding: utf-8 -*-
"""
model.py 5.0

Copyright (c) School of Geography.
University of Leeds, Leeds, West Yorkshire, UK, LS2 9JT.

Created on Sat Oct 28 11:28:48 2017

@author: Ourania Sermpezi
"""

#model.py

#import random
import math
#import operator
import matplotlib.pyplot
import agentframework


# Creating an object of type 'Agent'.

#a = agentframework.Agent()


#print(a._y, a._x)

#a.move()


#print(a._y, a._x)


# Defining the eucledian distance method.

def distance_between(agent0, agent1):
    return math.sqrt(((agent0.x - agent1.x)**2) + ((agent0.y - agent1.y)**2))
    

# Creating a variable for the number of agents.
    
num_of_agents = 10


# Creating a variable for the number of iterations for the random loop.

num_of_iterations = 100


# Creating an empty list.

agents = []


# Creating an empty list in order to store all the distances and derive minimum
# and maximums.

dist_list = []


# Making an agentframework type object.
#a = agentframework.Agent()


# Testing that the code works.
#print(a.y, a.x)


# Testing that the move method works.
#a.move()
#print(a.y, a.x)

# Generating num_of_agents random coordinates between 0 and 99, by running a
# loop.


for i in range(num_of_agents):
    agents.append (agentframework.Agent())


# Creating a loop to move the coordinates num_of_iterations times.

for j in range(num_of_iterations):
    for i in range(num_of_agents):
        agents[i].move()

                
# Printing the new coordinates to test that the loop has worked.
                
#print(agents)


# Setting the y and x limits of the plot axes between 0 and 99.

matplotlib.pyplot.ylim(0, 99)
matplotlib.pyplot.xlim(0, 99)


# Looping through the x and ys of each agent and plotting them.

for i in range(num_of_agents):
    matplotlib.pyplot.scatter(agents[i].x, agents[i].y)


# Finding the max value between all the x coordinates which are at position
# 1 of the list, i.e. which one is the most easterly one.
#m = max(agents, key=operator.itemgetter(1))
# Turning the most easterly point in the list into red.
#matplotlib.pyplot.scatter(m[1], m[0], color = 'red')


# Displaying the scatter plot.
    
matplotlib.pyplot.show()


# Going through all agents and calculating their eucledian distance to all
# other agents.

for agent0 in agents:
    for agent1 in agents:
        # Restricting the calculation of distance so that it does not check
        # between an agent and itself.
        
        if agent0 != agent1:
            distance = distance_between(agent0, agent1)

